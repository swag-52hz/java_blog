<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--设置扫描包，扫描对应包下的注解-->
    <context:component-scan
            base-package="mapper,service,aop">
    </context:component-scan>


    <!--
        配置数据库连接池
        此处使用阿里的druid连接池，功能强大，性能优秀
         c3p0 也是一种连接池，以前项目用的比较多。
         数据库连接池的作用：
    -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close" >
        <!--${url}为引用jdbc.properties中的url配置-->
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
        <property name="username" value="blog"></property>
        <property name="password" value="123456"></property>
        <!--初始连接大小-->
        <property name="initialSize" value="5"></property>
        <!--最小连接数,连接池至少需要保持的连接数-->
        <property name="minIdle" value="5"></property>
        <!--最大连接数-->
        <property name="maxActive" value="20"></property>
        <!--配置最大等待时间-->
        <property name="maxWait" value="60000"></property>
        <!--最大空闲时间-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!--连接空闲时间超过最大空闲时间时，执行validationQuery验证连接是否可用-->
        <property name="testWhileIdle" value="true"></property>
        <!--验证连接是否可用-->
        <property name="validationQuery" value="select 1 from dual"/>
    </bean>

    <!--整合mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--指定mybatis主配置文件路径-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!--指定mapper.xml文件路径-->
        <property name="mapperLocations"
                  value="classpath:mapper/*.xml"></property>
    </bean>

    <!-- 整合mybatis 配置dao层接口，交由spring创建对象-->
    <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定mybatis dao层接口目录-->
        <property name="basePackage" value="mapper"/>
        <!--注入sqlsessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>



    <!--配置事务管理器-->
    <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置datasource-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--以注解形式配置事务-->
    <!--<tx:annotation-driven/>-->
    <!--配置事务传播特性和 事务隔离级别-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--配置事务传播特性 method为方法名, propagation配置事务传播特性
             isolation="" 指定事务隔离级别-->
            <!-- name:指定切入点的方法名，匹配的方法才能够指定到事务传播特性和隔离级别-->
            <tx:method name="save*" propagation="REQUIRED"  isolation="READ_COMMITTED" />
            <tx:method name="insert*" propagation="REQUIRED" isolation="SERIALIZABLE"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED" />
            <!--查询操作 配置read-only=true，标识为只读事务。-->
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="select*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!--aop配置事务-->
    <aop:config>
        <!--切入点，将事务切入到service层方法-->
        <aop:pointcut id="pointcut" expression="execution(* service.*.*(..))"/>
        <!--<aop:advisor>配置事务切面-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>

    <!--开启AOP注解-->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

</beans>